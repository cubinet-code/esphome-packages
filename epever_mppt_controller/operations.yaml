switch:

  - platform: modbus_controller
    modbus_controller_id: epever
    register_type: coil
    force_new_range: true
    address: 0x0
    bitmask: 1
    name: "${prefix} OP: Turn Charging Device On"
    icon: mdi:toggle-switch

  # - platform: modbus_controller
  #   disabled_by_default: ${disabled_by_default}
  #   modbus_controller_id: epever
  #   register_type: coil
  #   force_new_range: true
  #   address: 0x1
  #   bitmask: 1
  #   name: "${prefix} OP: Output Control Mode (Manual/Auto)"
  #   icon: mdi:toggle-switch

  - platform: modbus_controller
    modbus_controller_id: epever
    register_type: coil
    force_new_range: true
    address: 0x2
    bitmask: 1
    name: "${prefix} OP: Manual Load Control"
    icon: mdi:toggle-switch

  - platform: modbus_controller
    disabled_by_default: ${disabled_by_default}
    modbus_controller_id: epever
    register_type: coil
    address: 0x3
    bitmask: 1
    name: "${prefix} OP: Auto Load Control"
    icon: mdi:toggle-switch

  - platform: modbus_controller
    disabled_by_default: ${disabled_by_default}
    modbus_controller_id: epever
    register_type: coil
    address: 0x5
    bitmask: 1
    name: "${prefix} OP: Enable Load Test Mode"
    icon: mdi:toggle-switch

  - platform: modbus_controller
    disabled_by_default: ${disabled_by_default}
    modbus_controller_id: epever
    register_type: coil
    address: 0x6
    bitmask: 1
    name: "${prefix} OP: Load Test Load Control"
    icon: mdi:toggle-switch

  - platform: modbus_controller
    disabled_by_default: ${disabled_by_default}
    modbus_controller_id: epever
    id: reset_to_fabric_default
    name: "${prefix} OP: Restore System Defaults"
    register_type: coil
    address: 0x13
    bitmask: 1
    icon: mdi:nuke

  - platform: modbus_controller
    disabled_by_default: ${disabled_by_default}
    modbus_controller_id: epever
    id: clear_energy_stats
    register_type: coil
    address: 0x14
    bitmask: 1
    name: "${prefix} OP: Clear Stats"
    icon: mdi:eraser

text_sensor:

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} OP: Day/Night"
    address: 0x200c
    register_type: discrete_input
    raw_encode: NONE
    icon: mdi:weather-sunset-up
    lambda: |-
      uint16_t value = data[item->offset];
      switch (value) { 
        case 0x0: return std::string("Day");
        case 0x1: return std::string("Night");
        default:  return esphome::to_string(value);
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} OP: System Time"
    internal: false
    register_type: holding
    address: 0x9013
    register_count: 3
    raw_encode: HEXBYTES
    icon: mdi:clock-outline
    lambda: |-
      uint8_t m = esphome::modbus_controller::byte_from_hex_str(x,0);
      uint8_t s = esphome::modbus_controller::byte_from_hex_str(x,1);
      uint8_t d = esphome::modbus_controller::byte_from_hex_str(x,2);
      uint8_t h = esphome::modbus_controller::byte_from_hex_str(x,3);
      uint8_t y = esphome::modbus_controller::byte_from_hex_str(x,4);
      uint8_t M = esphome::modbus_controller::byte_from_hex_str(x,5);
      
      char buf[20];
      sprintf(buf, "%04d-%02d-%02d %02d:%02d:%02d", y+2000, M, d, h, m, s);
      return std::string(buf);

button:
  - platform: template
    name: "${prefix} OP: Update System Time"
    on_press:
      - script.execute: update_rtc

