# D15: 1-Wrong identification for rated voltage
# D8: Battery inner resistance abnormal 1, normal 0
# D7-D4: 00H Normal, 01H Over Temp.(Higher than the warning settings), 02H Low Temp.(Lower than the warning settings),
# D3-D0: 00H Normal ,01H Over Voltage. , 02H Under Voltage, 03H Over discharge, 04H Fault

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} BAT: Battery Wrong Identification For Rated Voltage"
    register_type: read
    address: 0x3200
    bitmask: 0x8000
    icon: mdi:battery-alert-variant-outline
    device_class: problem
    
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} BAT: Battery Inner Resistance Abnormal"
    register_type: read
    address: 0x3200
    bitmask: 0x100
    icon: mdi:battery-alert-variant-outline

text_sensor:

  # D7-D4:  00H Normal, 01H Over Temp.(Higher than the warning settings), 02H Low Temp (Lower than the warning settings)
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} BAT: Battery Status Temperature"
    address: 0x3200
    register_type: read
    raw_encode: NONE
    lambda: |-
      uint16_t value = (data[item->offset] << 8) + data[item->offset+1];
      value = value >> 4;
      value = value & 0xf; 
      switch (value) { 
        case 0x0: return std::string("Normal");
        case 0x1: return std::string("Over Temp");
        case 0x2: return std::string("Low Temp");
        default: return std::string("Unknown");
      }
      return x;
    icon: mdi:thermometer

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} BAT: Battery Status Voltage"
    address: 0x3200
    register_type: read
    raw_encode: NONE
    lambda: |-
      uint16_t value = (data[item->offset] << 8) + data[item->offset+1];
      value = value & 0xf; 
      switch (value) { 
        case 0x0: return std::string("Normal");
        case 0x1: return std::string("Over Voltage");
        case 0x2: return std::string("Under Voltage");
        case 0x3: return std::string("Over Discharge");
        case 0x4: return std::string("Fault");
        default: return std::string("Unknown");
      }
      return x;
    icon: mdi:sine-wave
    