sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} RT: PV Input Voltage"
    address: 0x3100
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:sine-wave

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_current
    name: "${prefix} RT: PV Input Current"
    address: 0x3101
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:current-dc

  - platform: modbus_controller
    modbus_controller_id: epever
    id: pv_input_power
    name: "${prefix} RT: PV Input Power"
    address: 0x3102
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:flash
    device_class: power
    state_class: measurement

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_voltage
    name: "${prefix} RT: Charging Voltage"
    address: 0x3104
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:sine-wave

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_current
    name: "${prefix} RT: Charging Current"
    address: 0x3105
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:current-dc

  - platform: modbus_controller
    modbus_controller_id: epever
    id: charging_power
    name: "${prefix} RT: Charging Power"
    address: 0x3106
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:flash

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_voltage
    name: "${prefix} RT: Load Voltage"
    address: 0x310C
    unit_of_measurement: "V"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:sine-wave

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_current
    name: "${prefix} RT: Load Current"
    address: 0x310D
    unit_of_measurement: "A"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:current-dc

  - platform: modbus_controller
    modbus_controller_id: epever
    id: load_power
    name: "${prefix} RT: Load Power"
    address: 0x310E
    unit_of_measurement: "W"
    register_type: read
    value_type: U_DWORD_R
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    icon: mdi:flash
    device_class: power
    state_class: measurement

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_temperature
    name: "${prefix} RT: Battery Temperature"
    address: 0x3110
    unit_of_measurement: 째C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: device_temperature
    name: "${prefix} RT: Device Temperature"
    address: 0x3111
    unit_of_measurement: 째C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: power_components_temperature
    name: "${prefix} RT: Power Components Temperature"
    address: 0x3112
    unit_of_measurement: 째C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    id: battery_soc
    name: "${prefix} RT: Battery SOC Pct ModBus"
    address: 0x311A
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    icon: mdi:battery-high

  # Calculated SOC integration Ah
  - platform: integration
    name: "MPPT RT: Battery SOC Ah"
    id: mppt_rt_battery_soc_ah
    sensor: mppt_stat_battery_current
    time_unit: h
    integration_method: trapezoid
    accuracy_decimals: 2
    state_class: measurement
    icon: mdi:battery-high
    filters:
      - lambda: return x + id(mppt_bp_battery_capacity).state;

  # Calculated SOC integration Pct
  - platform: template
    name: "${prefix} STAT: Battery SOC Pct"
    lambda: |-
      if (id(mppt_rt_battery_soc_ah).state and id(mppt_bp_battery_capacity).state) {
        return id(mppt_rt_battery_soc_ah).state / id(mppt_bp_battery_capacity).state * 100.0;
      } else {
        return 0.0;
      }
    state_class: measurement
    accuracy_decimals: 0
    unit_of_measurement: "%"
    icon: mdi:battery-high

  - platform: modbus_controller
    modbus_controller_id: epever
    id: remote_battery_temperature
    name: "${prefix} RT: Remote Battery Temperature"
    address: 0x311B
    unit_of_measurement: 째C
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} RT: Current System Rated Voltage"
    address: 0x311d
    unit_of_measurement: V
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.01
    icon: mdi:sine-wave

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} RT: Over Temperature Inside The Device"
    address: 0x2000
    register_type: discrete_input
    raw_encode: NONE
    lambda: |-
      uint16_t value = data[item->offset];
      switch (value) { 
        case 0x0: return std::string("Normal");
        case 0x1: return std::string("Higher Than Over Temp Setting");
        default:  return esphome::to_string(value);
      }
      return x;
