binary_sensor:

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Short Circuit"
    register_type: read
    address: 0x3202
    bitmask: 0x800
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Unable To Discharge"
    register_type: read
    address: 0x3202
    bitmask: 0x400
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Unable To Stop"
    register_type: read
    address: 0x3202
    bitmask: 0x200
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Output Voltage Abnormal"
    register_type: read
    address: 0x3202
    bitmask: 0x100
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Input Over Voltage"
    register_type: read
    address: 0x3202
    bitmask: 0x80
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging HV Short Circuit"
    register_type: read
    address: 0x3202
    bitmask: 0x40
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Boost Over Voltage"
    register_type: read
    address: 0x3202
    bitmask: 0x20
    icon: mdi:battery-alert-variant-outline

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Output Over Voltage"
    register_type: read
    address: 0x3202
    bitmask: 0x10
    icon: mdi:battery-alert-variant-outline

text_sensor:

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Input Voltage"
    register_type: read
    address: 0x3202
    raw_encode: NONE
    lambda: |-
      uint16_t value = (data[item->offset] << 8) + data[item->offset+1];
      value = value >> 14;   
      value = value & 0x3; /* 0x1=1Bit, 0x3=2Bits, 0x7=3Bits */
      switch (value) { 
        case 0x0: return std::string("Normal");
        case 0x1: return std::string("Low");
        case 0x2: return std::string("High");
        case 0x3: return std::string("No Access");
        default: return std::string("Unknown");
      }
      return x;
    icon: mdi:sine-wave
    
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Output Power"
    register_type: read
    address: 0x3202
    raw_encode: NONE
    icon: mdi:flash
    lambda: |-
      uint16_t value = (data[item->offset] << 8) + data[item->offset+1];
      value = value >> 12;   
      value = value & 0x3; /* 0x1=1Bit, 0x3=2Bits, 0x7=3Bits */
      switch (value) { 
        case 0x0: return std::string("Light Load");
        case 0x1: return std::string("Moderate Load");
        case 0x2: return std::string("Rated");
        case 0x3: return std::string("Overload");
        default: return std::string("Unknown");
      }
      return x;
      
        
  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Health"
    register_type: read
    address: 0x3202
    raw_encode: NONE
    icon: mdi:pulse
    lambda: |-
      uint16_t value = (data[item->offset] << 8) + data[item->offset+1];
      value = value >> 1;
      value = value & 0x1; /* 0x1=1Bit, 0x3=2Bits, 0x7=3Bits */
      switch (value) { 
        case 0x0: return std::string("Normal");
        case 0x1: return std::string("Fault");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging State"
    register_type: read
    address: 0x3202
    raw_encode: HEXBYTES
    icon: mdi:battery-negative
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      value = value & 0x1; /* 0x1=1Bit, 0x3=2Bits, 0x7=3Bits */
      switch (value) { 
        case 0x0: return std::string("Standby");
        case 0x1: return std::string("Running");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: epever
    name: "${prefix} DIS: Discharging Register"
    register_type: read
    address: 0x3202
    raw_encode: HEXBYTES
    lambda: |-
      return x;
